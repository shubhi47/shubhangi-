{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7c07fe83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object detection stopped.\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "def detect_objects(video_path=None, use_webcam=False, image_path=None):\n",
    "    net = cv2.dnn.readNet(\"yolov3.weights\", \"yolov3.cfg\")\n",
    "    classes = [line.strip() for line in open(\"coco.names\")]\n",
    "\n",
    "    output_layers = [layer_name for layer_name in net.getUnconnectedOutLayersNames()]\n",
    "    colors = np.random.uniform(0, 255, size=(len(classes), 3))\n",
    "\n",
    "    cap = None  # Initialize cap outside the if conditions\n",
    "\n",
    "    if video_path:\n",
    "        cap = cv2.VideoCapture(video_path)\n",
    "    elif use_webcam:\n",
    "        cap = cv2.VideoCapture(0)\n",
    "    elif image_path:\n",
    "        frame = cv2.imread(image_path)\n",
    "        height, width, _ = frame.shape\n",
    "        blob = cv2.dnn.blobFromImage(frame, 0.00392, (320, 320), (0, 0, 0), True, False)\n",
    "        net.setInput(blob)\n",
    "        outputs = net.forward(output_layers)\n",
    "\n",
    "        boxes, confs, class_ids = [], [], []\n",
    "        for output in outputs:\n",
    "            for detect in output:\n",
    "                scores = detect[5:]\n",
    "                class_id = np.argmax(scores)\n",
    "                conf = scores[class_id]\n",
    "                if conf > 0.3:\n",
    "                    center_x, center_y, w, h = (detect[0] * width, detect[1] * height, detect[2] * width, detect[3] * height)\n",
    "                    x, y = int(center_x - w/2), int(center_y - h/2)\n",
    "                    boxes.append([x, y, w, h])\n",
    "                    confs.append(float(conf))\n",
    "                    class_ids.append(class_id)\n",
    "\n",
    "        indexes = cv2.dnn.NMSBoxes(boxes, confs, 0.5, 0.4)\n",
    "        font = cv2.FONT_HERSHEY_PLAIN\n",
    "        for i in range(len(boxes)):\n",
    "            if i in indexes:\n",
    "                x, y, w, h = boxes[i]\n",
    "                label, color = str(classes[class_ids[i]]), colors[i]\n",
    "\n",
    "                # Convert x, y, w, h to integers\n",
    "                x, y, w, h = int(x), int(y), int(w), int(h)\n",
    "\n",
    "                # Convert color to tuple if it's not\n",
    "                if not isinstance(color, tuple):\n",
    "                    color = tuple(map(int, color))\n",
    "\n",
    "                cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)\n",
    "                cv2.putText(frame, label, (x, y - 5), font, 1, color, 1)\n",
    "\n",
    "        frame = cv2.resize(frame, (800, 800))\n",
    "        cv2.imshow(\"Object Detection\", frame)\n",
    "        cv2.waitKey(0)\n",
    "        cv2.destroyAllWindows()\n",
    "\n",
    "        return\n",
    "\n",
    "    if not cap or not cap.isOpened():\n",
    "        print(\"Error: Couldn't open video source.\")\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        while cap.isOpened():\n",
    "            ret, frame = cap.read()\n",
    "            if not ret:\n",
    "                break\n",
    "\n",
    "            height, width, _ = frame.shape\n",
    "            blob = cv2.dnn.blobFromImage(frame, 0.00392, (320, 320), (0, 0, 0), True, False)\n",
    "            net.setInput(blob)\n",
    "            outputs = net.forward(output_layers)\n",
    "\n",
    "            boxes, confs, class_ids = [], [], []\n",
    "            for output in outputs:\n",
    "                for detect in output:\n",
    "                    scores = detect[5:]\n",
    "                    class_id = np.argmax(scores)\n",
    "                    conf = scores[class_id]\n",
    "                    if conf > 0.3:\n",
    "                        center_x, center_y, w, h = (detect[0] * width, detect[1] * height, detect[2] * width, detect[3] * height)\n",
    "                        x, y = int(center_x - w/2), int(center_y - h/2)\n",
    "                        boxes.append([x, y, w, h])\n",
    "                        confs.append(float(conf))\n",
    "                        class_ids.append(class_id)\n",
    "\n",
    "            indexes = cv2.dnn.NMSBoxes(boxes, confs, 0.5, 0.4)\n",
    "            font = cv2.FONT_HERSHEY_PLAIN\n",
    "            for i in range(len(boxes)):\n",
    "                if i in indexes:\n",
    "                    x, y, w, h = boxes[i]\n",
    "                    label, color = str(classes[class_ids[i]]), colors[i]\n",
    "\n",
    "                    # Convert x, y, w, h to integers\n",
    "                    x, y, w, h = int(x), int(y), int(w), int(h)\n",
    "\n",
    "                    # Convert color to tuple if it's not\n",
    "                    if not isinstance(color, tuple):\n",
    "                        color = tuple(map(int, color))\n",
    "\n",
    "                    cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)\n",
    "                    cv2.putText(frame, label, (x, y - 5), font, 1, color, 1)\n",
    "\n",
    "            cv2.imshow(\"Object Detection\", frame)\n",
    "\n",
    "            if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "                break\n",
    "    finally:\n",
    "        if cap:\n",
    "            cap.release()\n",
    "        cv2.destroyAllWindows()\n",
    "        print(\"Object detection stopped.\")\n",
    "\n",
    "# Example usage:\n",
    "detect_objects(video_path=\"C:/Users/anike/Desktop/VID_20231213_145750.mp4\",use_webcam=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
